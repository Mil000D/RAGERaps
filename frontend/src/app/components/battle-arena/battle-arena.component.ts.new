import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { BattleService } from '../../services/battle.service';
import { Battle, Round, JudgmentCreate } from '../../models/battle.model';

@Component({
  selector: 'app-battle-arena',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './battle-arena.component.html',
  styleUrl: './battle-arena.component.css'
})
export class BattleArenaComponent implements OnInit {
  battle: Battle | null = null;
  battleId: string | null = null;
  loading = false;
  error: string | null = null;
  judgmentForm: FormGroup;
  
  constructor(
    private battleService: BattleService,
    private router: Router,
    private route: ActivatedRoute,
    private fb: FormBuilder
  ) {
    this.judgmentForm = this.fb.group({
      winner: ['', Validators.required],
      feedback: ['', Validators.required]
    });
  }
  
  ngOnInit(): void {
    // Get battle ID from route params
    this.route.params.subscribe(params => {
      if (params['id']) {
        this.battleId = params['id'];
        this.loadBattle(this.battleId);
      } else {
        this.router.navigate(['/battle']);
      }
    });
  }
  
  loadBattle(id: string): void {
    this.loading = true;
    this.battleService.getBattle(id).subscribe({
      next: (battle) => {
        this.battle = battle;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error loading battle', err);
        this.error = 'Failed to load battle. Please try again.';
        this.loading = false;
      }
    });
  }

  judgeRoundWithAI(battleId: string, roundId: string): void {
    if (!this.battle) return;
    
    this.loading = true;
    this.battleService.judgeRoundWithAI(battleId, roundId).subscribe({
      next: (updatedBattle) => {
        this.battle = updatedBattle;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error judging round with AI', err);
        this.error = 'Failed to judge round with AI. Please try again.';
        this.loading = false;
      }
    });
  }
  
  judgeRoundByUser(battleId: string, roundId: string): void {
    if (!this.battle || this.judgmentForm.invalid) return;
    
    const judgment: JudgmentCreate = {
      round_id: roundId,
      winner: this.judgmentForm.value.winner,
      feedback: this.judgmentForm.value.feedback
    };
    
    this.loading = true;
    this.battleService.judgeRoundByUser(battleId, roundId, judgment).subscribe({
      next: (updatedBattle) => {
        this.battle = updatedBattle;
        this.loading = false;
        this.judgmentForm.reset();
      },
      error: (err) => {
        console.error('Error submitting user judgment', err);
        this.error = 'Failed to submit judgment. Please try again.';
        this.loading = false;
      }
    });
  }
  
  backToList(): void {
    this.router.navigate(['/battle']);
  }
  
  // Helper method for UI
  getInitial(name: string): string {
    return name ? name.charAt(0).toUpperCase() : '';
  }
}
